AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serviced-Oriented Stock Platform

Parameters:
  FrontendBucketName:
    Type: String
  FrontendDomain:
    Type: String
  FrontendLoginSubDomain:
    Type: String
  EnvType:
    Type: String
    Default: local

Conditions:
  IsLocal: !Equals [ !Ref EnvType, local ]

Globals:
  Function:
    Timeout: 10
    Runtime: nodejs12.x
    Environment:
      Variables:
        ORIGIN: !Sub "https://${FrontendDomain}"
  Api:
    Domain:
      BasePath:
        - /v1
      DomainName: !Sub "api.${FrontendDomain}"
      CertificateArn: !Ref WildcardCertificate
      Route53:
        HostedZoneId: !Ref FrontendRouteZone
    Cors:
      AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
      AllowHeaders: "'Content-Type, Authorization'"
      AllowOrigin: !If [ IsLocal, "'*'", !Sub "'https://${FrontendDomain}'" ]

Resources:
  ##################### Lambda Functions & API Events #####################

  AnalysisHelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/analysis/hello
      Handler: index.handler
      Runtime: nodejs12.x
      Events:
        ApiGet:
          Type: Api
          Properties:
            Path: /analysis/hello
            Method: GET
        ApiPost:
          Type: Api
          Properties:
            Path: /analysis/hello
            Method: POST

  GraphHelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/graph/hello
      Handler: index.handler
      Runtime: nodejs12.x
      Events:
        ApiGet:
          Type: Api
          Properties:
            Path: /graph/hello
            Method: GET
        ApiPost:
          Type: Api
          Properties:
            Path: /graph/hello
            Method: POST

  PortfolioHelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/portfolio/hello
      Handler: index.handler
      Runtime: nodejs12.x
      Events:
        ApiGet:
          Type: Api
          Properties:
            Path: /portfolio/hello
            Method: GET
        ApiPost:
          Type: Api
          Properties:
            Path: /portfolio/hello
            Method: POST

  StockHelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/stock/hello
      Handler: index.handler
      Runtime: nodejs12.x
      Events:
        ApiGet:
          Type: Api
          Properties:
            Path: /stock/hello
            Method: GET
        ApiPost:
          Type: Api
          Properties:
            Path: /stock/hello
            Method: POST

  DirectoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/directory
      Handler: index.handler
      Runtime: nodejs12.x
      Policies:
        - Statement:
            - Sid: ApiGatewayGetPolicy
              Effect: Allow
              Action:
                - apigateway:GET
              Resource: !Sub "arn:aws:apigateway:${AWS::Region}::/*"
      Events:
        ApiGet:
          Type: Api
          Properties:
            Path: /directory
            Method: GET

  UserRegistrationHelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/user-registration
      Handler: index.handler
      Runtime: nodejs12.x

  ##################### SNS Topics #####################

  UserCreateTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: User-Create

  StockPriceUpdateTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: Stock-Price-Update

  ##################### RDS Resources #####################

  StockDatabaseCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Stock database password
      GenerateSecretString:
        SecretStringTemplate: '{"username": "root"}'
        GenerateStringKey: 'password'
        ExcludeCharacters: '\/@" '
      Name: /prod/databases/stock

  StockInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref StockDatabaseCredentials
      TargetId: !Ref StockDatabase
      TargetType: AWS::RDS::DBInstance

  StockDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t2.micro # Free Tier
      DBName: stock
      DBInstanceIdentifier: stock-instance
      Engine: mysql
      AllocatedStorage: 20 # GB
      PubliclyAccessible: false
      MasterUsername: !Join ["", [ "{{resolve:secretsmanager:", !Ref StockDatabaseCredentials, ":SecretString:username}}" ]]
      MasterUserPassword: !Join ["", [ "{{resolve:secretsmanager:", !Ref StockDatabaseCredentials, ":SecretString:password}}" ]]

  PortfolioDatabaseCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Portfolio database password
      GenerateSecretString:
        SecretStringTemplate: '{"username": "root"}'
        GenerateStringKey: 'password'
        ExcludeCharacters: '\/@" '
      Name: /prod/databases/portfolio

  PortfolioInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref PortfolioDatabaseCredentials
      TargetId: !Ref PortfolioDatabase
      TargetType: AWS::RDS::DBInstance

  PortfolioDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t2.micro # Free Tier
      DBName: portfolio
      DBInstanceIdentifier: portfolio-instance
      Engine: mysql
      AllocatedStorage: 20 # GB
      PubliclyAccessible: false
      MasterUsername: !Join ["", [ "{{resolve:secretsmanager:", !Ref PortfolioDatabaseCredentials, ":SecretString:username}}" ]]
      MasterUserPassword: !Join ["", [ "{{resolve:secretsmanager:", !Ref PortfolioDatabaseCredentials, ":SecretString:password}}" ]]

  ##################### Frontend Resources #####################

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FrontendBucketName

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: "Allow"
            Principal:
              CanonicalUser: !GetAtt FrontendOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub "${FrontendBucket.Arn}/*"
          - Action: "s3:ListBucket"
            Effect: "Allow"
            Principal:
              CanonicalUser: !GetAtt FrontendOriginAccessIdentity.S3CanonicalUserId
            Resource: !GetAtt FrontendBucket.Arn

  # Set policy to only allow access through CloudFront (HTTPS)
  FrontendOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Join [ "", [ "access-identity-", !GetAtt FrontendBucket.DomainName ] ]

  FrontendCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref FrontendDomain
        Enabled: true
        Origins:
          - DomainName: !GetAtt FrontendBucket.DomainName
            Id: S3-Frontend-site
            S3OriginConfig:
              OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref FrontendOriginAccessIdentity ] ]
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: S3-Frontend-site
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        ViewerCertificate:
          AcmCertificateArn: !Ref FrontendCertificate
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  ##################### Certificates & Route 53 #####################

  # Note: The CNAME record to perform DNS validation for these two certs. was manually created in the console.
  FrontendCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref FrontendDomain
      ValidationMethod: DNS

  WildcardCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "*.${FrontendDomain}"
      ValidationMethod: DNS

  FrontendRouteZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref FrontendDomain

  FrontendRouteCloudFrontRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref FrontendDomain
      Type: A
      HostedZoneId: !Ref FrontendRouteZone
      AliasTarget:
        DNSName: !GetAtt FrontendCloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront global zone ID

  ##################### Cognito Resources for User Auth #####################

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: Stock-Platform-Users
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: UserPoolClient
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub "https://${FrontendDomain}/"
      LogoutURLs:
        - !Sub "https://${FrontendDomain}/"
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - user-api/user:manage
      GenerateSecret: false
    DependsOn: UserPoolResourceServer

  UserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: user-api
      Name: User Manage
      Scopes:
        - ScopeName: "user:manage"
          ScopeDescription: "Management of users' own resources"
      UserPoolId: !Ref UserPool

  # Note: Due to a CloudFormation limitation, after creating this resource, an A record must be manually created
  # that points to the 'Alias Target' as indicated in the Cognito Console (unfortunately CF does not currently
  # support returning this value for other resources to reference).
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "auth.${FrontendDomain}"
      CustomDomainConfig:
        CertificateArn: !Ref WildcardCertificate
      UserPoolId: !Ref UserPool
    DependsOn: FrontendRouteCloudFrontRecord # Root A record is needed to register a custom domain

Outputs:
  ApiGateway:
    Description: "Backend API Gateway URL"
    Value: !Sub "https://api.${FrontendDomain}/v1/"
  FrontendDomainNameServers:
    Description: "Domain Route 53 Name Servers"
    Value: !Join [ ",", !GetAtt FrontendRouteZone.NameServers ]
  FrontendCloudFrontEndpoint:
    Description: "Frontend CloudFront Distribution"
    Value: !Sub "https://${FrontendDomain}/"
  FrontendLoginUrl:
    Description: "User Sign In URL"
    Value: !Sub
      - "https://${UserPoolDomain}/login?client_id=${UserPoolClient}&response_type=token&scope=${Scope}&redirect_uri=${RedirectURI}"
      - Scope: "user-api/user:manage"
        RedirectURI: !Sub "https://${FrontendDomain}/"
